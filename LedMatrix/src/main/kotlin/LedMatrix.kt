import com.pi4j.io.gpio.digital.DigitalOutput
import com.pi4j.ktx.io.digital.digitalOutput
import com.pi4j.ktx.pi4j
import kotlinx.coroutines.delay

private val smile = listOf(0x1c, 0x22, 0x51, 0x45, 0x45, 0x51, 0x22, 0x1c)
private val heart = listOf(0x30, 0x48, 0x44, 0x22, 0x22, 0x44, 0x48, 0x30)

private val alphabet = mapOf(
    ' ' to listOf(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    'А' to listOf(0x00, 0x00, 0x3e, 0x48, 0x48, 0x3e, 0x00, 0x00),
    'Б' to listOf(0x00, 0x00, 0x7e, 0x52, 0x52, 0x5e, 0x00, 0x00),
    'В' to listOf(0x00, 0x00, 0x7e, 0x5a, 0x5a, 0x66, 0x00, 0x00),
    'Г' to listOf(0x00, 0x00, 0x7e, 0x40, 0x40, 0x40, 0x00, 0x00),
    'Д' to listOf(0x00, 0x06, 0x7c, 0x44, 0x44, 0x7c, 0x06, 0x00),
    'Е' to listOf(0x00, 0x00, 0x7e, 0x52, 0x52, 0x52, 0x00, 0x00),
    'Ё' to listOf(0x00, 0x00, 0x7e, 0xd2, 0xd2, 0x52, 0x00, 0x00),
    'Ж' to listOf(0x00, 0x42, 0x24, 0x7e, 0x7e, 0x24, 0x42, 0x00),
    'З' to listOf(0x00, 0x00, 0x42, 0x5a, 0x5a, 0x66, 0x00, 0x00),
    'И' to listOf(0x00, 0x7e, 0x04, 0x08, 0x10, 0x20, 0x7e, 0x00),
    'Й' to listOf(0x00, 0x7e, 0x04, 0x48, 0x90, 0x20, 0x7e, 0x00),
    'К' to listOf(0x00, 0x00, 0x7e, 0x18, 0x24, 0x42, 0x00, 0x00),
    'Л' to listOf(0x00, 0x00, 0x02, 0x7c, 0x40, 0x7e, 0x00, 0x00),
    'М' to listOf(0x00, 0x7e, 0x20, 0x18, 0x18, 0x20, 0x7e, 0x00),
    'Н' to listOf(0x00, 0x00, 0x7e, 0x18, 0x18, 0x7e, 0x00, 0x00),
    'О' to listOf(0x00, 0x00, 0x7e, 0x42, 0x42, 0x7e, 0x00, 0x00),
    'П' to listOf(0x00, 0x00, 0x7e, 0x40, 0x40, 0x7e, 0x00, 0x00),
    'Р' to listOf(0x00, 0x00, 0x7e, 0x50, 0x50, 0x70, 0x00, 0x00),
    'С' to listOf(0x00, 0x00, 0x7e, 0x42, 0x42, 0x42, 0x00, 0x00),
    'Т' to listOf(0x00, 0x40, 0x40, 0x7e, 0x7e, 0x40, 0x40, 0x00),
    'У' to listOf(0x00, 0x00, 0x62, 0x14, 0x08, 0x70, 0x00, 0x00),
    'Ф' to listOf(0x00, 0x78, 0x48, 0x7f, 0x7f, 0x48, 0x78, 0x00),
    'Х' to listOf(0x00, 0x42, 0x66, 0x18, 0x18, 0x66, 0x42, 0x00),
    'Ц' to listOf(0x00, 0x00, 0x7c, 0x04, 0x04, 0x7c, 0x02, 0x00),
    'Ч' to listOf(0x00, 0x00, 0x70, 0x10, 0x10, 0x7e, 0x00, 0x00),
    'Ш' to listOf(0x00, 0x7e, 0x02, 0x7e, 0x7e, 0x02, 0x7e, 0x00),
    'Щ' to listOf(0x00, 0x7e, 0x02, 0x7e, 0x7e, 0x02, 0x7e, 0x03),
    'Ъ' to listOf(0x00, 0x40, 0x7e, 0x12, 0x12, 0x1e, 0x00, 0x00),
    'Ы' to listOf(0x00, 0x7e, 0x12, 0x12, 0x1e, 0x00, 0x7e, 0x00),
    'Ь' to listOf(0x00, 0x00, 0x7e, 0x12, 0x12, 0x1e, 0x00, 0x00),
    'Э' to listOf(0x00, 0x00, 0x42, 0x5a, 0x5a, 0x7e, 0x00, 0x00),
    'Ю' to listOf(0x00, 0x00, 0x7e, 0x18, 0x7e, 0x42, 0x7e, 0x00),
    'Я' to listOf(0x00, 0x00, 0x72, 0x54, 0x58, 0x7e, 0x00, 0x00),
    'A' to listOf(0x00, 0x00, 0x3e, 0x48, 0x48, 0x3e, 0x00, 0x00),
    'B' to listOf(0x00, 0x00, 0x7e, 0x5a, 0x5a, 0x66, 0x00, 0x00),
    'C' to listOf(0x00, 0x00, 0x7e, 0x42, 0x42, 0x42, 0x00, 0x00),
    'D' to listOf(0x00, 0x00, 0x7F, 0x41, 0x41, 0x3E, 0x00, 0x00),
    'E' to listOf(0x00, 0x00, 0x7e, 0x52, 0x52, 0x52, 0x00, 0x00),
    'F' to listOf(0x00, 0x00, 0x7F, 0x48, 0x48, 0x40, 0x00, 0x00),
    'G' to listOf(0x00, 0x7e, 0x42, 0x5a, 0x52, 0x5e, 0x00, 0x00),
    'H' to listOf(0x00, 0x00, 0x7e, 0x18, 0x18, 0x7e, 0x00, 0x00),
    'I' to listOf(0x00, 0x00, 0x42, 0x7e, 0x7e, 0x42, 0x00, 0x00),
    'J' to listOf(0x00, 0x00, 0x0e, 0x02, 0x7e, 0x7e, 0x00, 0x00),
    'K' to listOf(0x00, 0x00, 0x7e, 0x18, 0x24, 0x42, 0x00, 0x00),
    'L' to listOf(0x00, 0x00, 0x7e, 0x7e, 0x06, 0x06, 0x00, 0x00),
    'M' to listOf(0x00, 0x7e, 0x20, 0x18, 0x18, 0x20, 0x7e, 0x00),
    'N' to listOf(0x00, 0x7e, 0x20, 0x10, 0x08, 0x04, 0x7e, 0x00),
    'O' to listOf(0x00, 0x00, 0x7e, 0x42, 0x42, 0x7e, 0x00, 0x00),
    'P' to listOf(0x00, 0x00, 0x7e, 0x50, 0x50, 0x70, 0x00, 0x00),
    'Q' to listOf(0x00, 0x7e, 0x42, 0x42, 0x46, 0x7e, 0x01, 0x00),
    'R' to listOf(0x00, 0x00, 0x7e, 0x48, 0x48, 0x4c, 0x72, 0x00),
    'S' to listOf(0x00, 0x00, 0x79, 0x49, 0x49, 0x4f, 0x00, 0x00),
    'T' to listOf(0x00, 0x40, 0x40, 0x7e, 0x7e, 0x40, 0x40, 0x00),
    'U' to listOf(0x00, 0x00, 0x7e, 0x02, 0x02, 0x7e, 0x00, 0x00),
    'V' to listOf(0x00, 0x60, 0x1c, 0x02, 0x02, 0x1c, 0x60, 0x00),
    'W' to listOf(0x00, 0x78, 0x06, 0x3e, 0x3e, 0x06, 0x78, 0x00),
    'X' to listOf(0x00, 0x42, 0x66, 0x18, 0x18, 0x66, 0x42, 0x00),
    'Y' to listOf(0x00, 0x60, 0x10, 0x0e, 0x0e, 0x10, 0x60, 0x00),
    'Z' to listOf(0x00, 0x00, 0x46, 0x4a, 0x52, 0x62, 0x00, 0x00),
    '0' to listOf(0x00, 0x00, 0x3E, 0x41, 0x41, 0x3E, 0x00, 0x00),
    '1' to listOf(0x00, 0x00, 0x21, 0x7F, 0x01, 0x00, 0x00, 0x00),
    '2' to listOf(0x00, 0x00, 0x23, 0x45, 0x49, 0x31, 0x00, 0x00),
    '3' to listOf(0x00, 0x00, 0x22, 0x49, 0x49, 0x36, 0x00, 0x00),
    '4' to listOf(0x00, 0x00, 0x0E, 0x32, 0x7F, 0x02, 0x00, 0x00),
    '5' to listOf(0x00, 0x00, 0x79, 0x49, 0x49, 0x46, 0x00, 0x00),
    '6' to listOf(0x00, 0x00, 0x3E, 0x49, 0x49, 0x26, 0x00, 0x00),
    '7' to listOf(0x00, 0x00, 0x60, 0x47, 0x48, 0x70, 0x00, 0x00),
    '8' to listOf(0x00, 0x00, 0x36, 0x49, 0x49, 0x36, 0x00, 0x00),
    '9' to listOf(0x00, 0x00, 0x32, 0x49, 0x49, 0x3E, 0x00, 0x00),
    '.' to listOf(0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00),
    ',' to listOf(0x00, 0x00, 0x01, 0x06, 0x06, 0x00, 0x00, 0x00),
    '!' to listOf(0x00, 0x00, 0x00, 0x7d, 0x7d, 0x00, 0x00, 0x00),
    '♥' to heart,
    '☺' to smile
)

fun main() {
    ledMatrix()
}

private fun ledMatrix() = runUntilExit {
    pi4j {
        val pins = getPinMap()
        val dataPin = pins.bcm(PinName.GPIO_17)
        val latchPin = pins.bcm(PinName.GPIO_27)
        val clockPin = pins.bcm(PinName.GPIO_22)
        val dataOutput = digitalOutput(dataPin)
        val latchOutput = digitalOutput(latchPin)
        val clockOutput = digitalOutput(clockPin)
        println("Type your phrase:")
        val text = " ${readln()} "
        while (isRunning) {
            val textData = text.uppercase().toCharArray().map { alphabet[it] ?: emptyList() }.flatten()
            repeat(textData.size - 8) { column ->
                repeat(10) {
                    var x = 0x80
                    for (index in column until 8 + column) {
                        latchOutput.low()
                        shiftOut(textData[index], dataOutput, clockOutput, false)
                        shiftOut(x.inv(), dataOutput, clockOutput, false)
                        latchOutput.high()
                        x = x.shr(1)
                        delay(1)
                    }
                }
            }
        }
    }
}

fun shiftOut(value: Int, dataOutput: DigitalOutput, clockOutput: DigitalOutput, isLeftShift: Boolean) {
    repeat(8) {
        clockOutput.low()
        if (isLeftShift) {
            if (1.and(value.shr(it)) == 1) dataOutput.high() else dataOutput.low()
        } else {
            if (128.and(value.shl(it)) == 128) dataOutput.high() else dataOutput.low()
        }
        clockOutput.high()
    }
}